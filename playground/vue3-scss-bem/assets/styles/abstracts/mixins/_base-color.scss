/// The mixins for operating base colors

@use '../variables/config/base-color' as config;
@use '../mixins/css-var' as css-var;
@use 'sass:map';

/// Process all keys in the SCSS map `$colors`, and set all CSS colors from them
/// @access public
/// @example
///   @include set-colors();
///   --cs-color-white: $colors.white;
///   --cs-color-black: $colors.black;
///   --cs-color-primary: $colors.primary;
///   --cs-color-success: $colors.success;
///   --cs-color-warn: $colors.warn;
///   --cs-color-error: $colors.error;
@mixin set-colors() {
  @each $key, $value in config.$colors {
    @include css-var.set-var(('color', $key), $value);
  }
}

/// Process all keys in the SCSS map `$colors-<schema>`, and set all CSS colors from them
/// @access public
/// @param {String} $schema - Color schema
/// @example
///   @include set-colors-schema('light');
///   --cs-color-primary-light-1: $colors-light.primary.light-1;
///   --cs-color-primary-light-3: $colors-light.primary.light-3;
///   --cs-color-primary-dark-2: $colors-dark.primary.dark-2;
/// @example
///   @include set-colors-schema('dark');
///   --cs-color-primary-light-1: $colors-dark.primary.light-1;
///   --cs-color-primary-light-3: $colors-dark.primary.light-3;
///   --cs-color-primary-dark-2: $colors-dark.primary.dark-2;
@mixin set-colors-schema($schema: 'light') {
  $map: config.$colors;

  @if $schema == 'light' {
    $map: config.$colors-light;
  } @else if $schema == 'dark' {
    $map: config.$colors-dark;
  }

  @each $key, $value in $map {
    @each $level in map.keys($value) {
      @include css-var.set-var(('color', $key, $level), map.get($value, $level));
    }
  }
}
